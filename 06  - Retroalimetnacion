# Importar librerías necesarias
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import preprocessing
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix

# Función para trazar la matriz de confusión
def plot_confusion_matrix(y, y_predict):
    cm = confusion_matrix(y, y_predict)
    ax = plt.subplot()
    sns.heatmap(cm, annot=True, ax=ax)  # annot=True para anotar las celdas
    ax.set_xlabel('Predicted labels')
    ax.set_ylabel('True labels')
    ax.set_title('Confusion Matrix')
    ax.xaxis.set_ticklabels(['did not land', 'landed'])
    ax.yaxis.set_ticklabels(['did not land', 'landed'])
    plt.show()

# Cargar los datos
url1 = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/dataset_part_2.csv"
url2 = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/dataset_part_3.csv'

data = pd.read_csv(url1)
X = pd.read_csv(url2)

# Crear la serie de etiquetas
Y = data['Class'].to_numpy()

# Estandarizar los datos
scaler = preprocessing.StandardScaler()
X = scaler.fit_transform(X)

# Dividir los datos en entrenamiento y prueba
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

# Tarea 4: Regresión logística
parameters_lr = {'C': [0.01, 0.1, 1], 'penalty': ['l2'], 'solver': ['lbfgs']}
lr = LogisticRegression()
logreg_cv = GridSearchCV(lr, parameters_lr, cv=10)
logreg_cv.fit(X_train, Y_train)

print("Logistic Regression")
print("Tuned hyperparameters: ", logreg_cv.best_params_)
print("Accuracy on validation data: ", logreg_cv.best_score_)

# Evaluar el modelo en datos de prueba
yhat_lr = logreg_cv.predict(X_test)
print("Test accuracy for Logistic Regression: ", logreg_cv.score(X_test, Y_test))
plot_confusion_matrix(Y_test, yhat_lr)

# Tarea 6: Máquina de soporte vectorial
parameters_svm = {'kernel': ('linear', 'rbf', 'poly', 'sigmoid'), 'C': np.logspace(-3, 3, 5), 'gamma': np.logspace(-3, 3, 5)}
svm = SVC()
svm_cv = GridSearchCV(svm, parameters_svm, cv=10)
svm_cv.fit(X_train, Y_train)

print("Support Vector Machine")
print("Tuned hyperparameters: ", svm_cv.best_params_)
print("Accuracy on validation data: ", svm_cv.best_score_)

# Evaluar el modelo en datos de prueba
yhat_svm = svm_cv.predict(X_test)
print("Test accuracy for SVM: ", svm_cv.score(X_test, Y_test))
plot_confusion_matrix(Y_test, yhat_svm)

# Tarea 8: Árbol de decisión
parameters_tree = {'criterion': ['gini', 'entropy'], 'splitter': ['best', 'random'], 'max_depth': [2*n for n in range(1, 10)],
                   'max_features': ['auto', 'sqrt'], 'min_samples_leaf': [1, 2, 4], 'min_samples_split': [2, 5, 10]}
tree = DecisionTreeClassifier()
tree_cv = GridSearchCV(tree, parameters_tree, cv=10)
tree_cv.fit(X_train, Y_train)

print("Decision Tree")
print("Tuned hyperparameters: ", tree_cv.best_params_)
print("Accuracy on validation data: ", tree_cv.best_score_)

# Evaluar el modelo en datos de prueba
yhat_tree = tree_cv.predict(X_test)
print("Test accuracy for Decision Tree: ", tree_cv.score(X_test, Y_test))
plot_confusion_matrix(Y_test, yhat_tree)

# Tarea 10: K-Nearest Neighbors
parameters_knn = {'n_neighbors': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'], 'p': [1, 2]}
knn = KNeighborsClassifier()
knn_cv = GridSearchCV(knn, parameters_knn, cv=10)
knn_cv.fit(X_train, Y_train)

print("K-Nearest Neighbors")
print("Tuned hyperparameters: ", knn_cv.best_params_)
print("Accuracy on validation data: ", knn_cv.best_score_)

# Evaluar el modelo en datos de prueba
yhat_knn = knn_cv.predict(X_test)
print("Test accuracy for KNN: ", knn_cv.score(X_test, Y_test))
plot_confusion_matrix(Y_test, yhat_knn)

# Tarea 12: Encontrar el mejor modelo
accuracies = {
    "Logistic Regression": logreg_cv.score(X_test, Y_test),
    "Support Vector Machine": svm_cv.score(X_test, Y_test),
    "Decision Tree": tree_cv.score(X_test, Y_test),
    "K-Nearest Neighbors": knn_cv.score(X_test, Y_test)
}

best_model = max(accuracies, key=accuracies.get)
print(f"The best model is {best_model} with a test accuracy of {accuracies[best_model]:.2f}")
